@page "/analise"
@using RoletaAnalise.maui.Context
@using RoletaAnalise.maui.Models

<h3>Analise</h3>

<select class="form-select" @onchange="OnNumeroSelected" aria-label="Default select example" style="max-width: 500px">
    <option selected>Selecione o número</option>
    @foreach (var numero in numeros)
        {
        <option value="@numero">@numero</option>
    }
</select>

<div style="font-size: 0.65rem" class="container">
    <div class="row">
        <div class="col-md-4">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th scope="col">Ranking 1ª casa</th>
                        <th scope="col">Qtd registros</th>
                    </tr>
                </thead>
                <tbody>
                        @foreach (var i in result)
                        {
                        <tr>
                            <td>@i.Indice</td>
                            <td>@i.Valor</td>
                        </tr>
                        }
                </tbody>
            </table>
        </div>

        <div class="col-md-4">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th scope="col">Ranking 2ª casa</th>
                        <th scope="col">Qtd registros</th>
                    </tr>
                </thead>
                <tbody>
                        @foreach (var i in result1)
                        {
                            <tr>
                                <td>@i.Indice</td>
                                <td>@i.Valor</td>
                            </tr>
                        }
                </tbody>
            </table>
        </div>

        <div class="col-md-4">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th scope="col">Ranking 3ª casa</th>
                        <th scope="col">Qtd registros</th>
                    </tr>
                </thead>
                <tbody>
                        @foreach (var i in result2)
                        {
                        <tr>
                            <td>@i.Indice</td>
                            <td>@i.Valor</td>
                        </tr>
                        }
                </tbody>
            </table>
        </div>
    </div>
</div>

@* <table>
    <thead>
        <tr>
            <th>A</th>
            <th>B</th>
            <th>C</th>
        </tr>
    </thead>
    <tbody>
            @foreach (var i in sequencias)
            {
                <tr>
                    @foreach (var y in i)
                    {
                        <td>@y.Valor</td>
                    }
                </tr>
            }
    </tbody>
</table> *@

@code {
    private int[] numeros = Enumerable.Range(0, 37).ToArray();
    private int numeroSelecionado;
    private ManipulaJson _salvaJson = new();
    private List<Numero> listaDeNumeros = new();
    private List<List<Numero>> sequencias = new();
    List<int> rankingOrganizado = Enumerable.Repeat(0, 37).ToList();
    List<int> ranking1Organizado = Enumerable.Repeat(0, 37).ToList();
    List<int> ranking2Organizado = Enumerable.Repeat(0, 37).ToList();
    private List<(int Valor, int Indice)> result = new();
    private List<(int Valor, int Indice)> result1 = new();
    private List<(int Valor, int Indice)> result2 = new();



    protected override void OnInitialized()
    {
        listaDeNumeros = _salvaJson.LerJson();
    }

    private void OnNumeroSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int numero))
        {
            numeroSelecionado = numero;
            AnalisaLista(numeroSelecionado); // Chama o método com o número selecionado
            AnalisaFrequencia(sequencias);
        }
        else
        {
            // Lida com caso de seleção inválida (ex: opção "Selecione o número")
            numeroSelecionado = 0;
        }
    }

    private void AnalisaLista(int numeroParaVerificar)
    {
        sequencias.Clear();
        int i = 0;

        // Percorre a lista de números
        while (i < listaDeNumeros.Count)
        {
            // Verifica se o número atual corresponde ao número para verificar
            if (listaDeNumeros[i].Valor == numeroParaVerificar)
            {

                // Captura os próximos 3 números (se houver)
                int[] x = new int[3];
                if (i + 3 < listaDeNumeros.Count)
                {
                    x[0] = listaDeNumeros[i + 1].Valor;
                    x[1] = listaDeNumeros[i + 2].Valor;
                    x[2] = listaDeNumeros[i + 3].Valor;
                }

                List<Numero> y = new();

                // Adiciona os números capturados à lista
                foreach (var m in x)
                {
                    Numero numero = new Numero { Valor = m };
                    y.Add(numero);  // Adiciona à lista de números
                }
                // Adiciona a sequência de números à lista de sequências
                sequencias.Add(y);

                // Avança o índice para continuar a partir do quarto número
                i += 4;
            }
            else
            {
                i++;
            }
        }
    }


    private void AnalisaFrequencia(List<List<Numero>> listaDeListas)
    {
        rankingOrganizado = Enumerable.Repeat(0, 37).ToList();
        ranking1Organizado = Enumerable.Repeat(0, 37).ToList();
        ranking2Organizado = Enumerable.Repeat(0, 37).ToList();

        for (int i = 0; i <= listaDeListas.Count - 1; i++)
        {
            int valor = listaDeListas[i][0].Valor;
            int valor1 = listaDeListas[i][1].Valor;
            int valor2 = listaDeListas[i][2].Valor;
            if (valor < numeros.Count())
            {
                rankingOrganizado[valor] = rankingOrganizado[valor] + 1;
            }
            if (valor1 < numeros.Count())
            {
                ranking1Organizado[valor1] = ranking1Organizado[valor1] + 1;
            }
            if (valor2 < numeros.Count())
            {
                ranking2Organizado[valor2] = ranking2Organizado[valor2] + 1;
            }
        }

        result = rankingOrganizado
                            .Select((valor, indice) => (Valor: valor, Indice: indice))
                            .OrderByDescending(x => x.Valor)
                            .ToList();

        result1 = ranking1Organizado
                            .Select((valor, indice) => (Valor: valor, Indice: indice))
                            .OrderByDescending(x => x.Valor)
                            .ToList();

        result2 = ranking2Organizado
                            .Select((valor, indice) => (Valor: valor, Indice: indice))
                            .OrderByDescending(x => x.Valor)
                            .ToList();




    }
    // VERIFICAR SE O CÒDIGO TA COM OS RESULTADOS CORRETOS
}